概念参考: https://blog.csdn.net/qq_25707161/article/details/70213457
具体实现参考: https://www.cnblogs.com/JVxie/p/4859889.html

1 首先介绍树的一些概念
  1.1 满二叉树: 二叉树的第i层节点数量为2^(i-1)，则称此二叉树为满二叉树。
  1.2 完全二叉树: 设二叉树深度为h，前(h-1)层均被填满(每个父节点均有两个子节点)，第h层从左至右，只有最右侧子树未被填满，则称此树为完全二叉树。

2 堆的性质
  2.1 堆中任意节点的值不大于(小于)其子节点的值。 不大于---最小堆   不小于---最大堆
  2.2 堆是一颗完全二叉树

3 堆的操作
  图片参考: https://blog.csdn.net/qq_25707161/article/details/70213457
  3.1 最小二叉堆的插入(入队): 从完全二叉树的最后一层上，最右侧的子树开始，依据堆的第1个性质，通过不断向上向下调整插入元素的位置完成插入。
  3.2 最小二叉堆的删除(出队): 出队一定是删除堆结构中堆顶节点，也就是数组中第1个元素。出队时，将最右侧子树的最右侧节点(也就是数组中的最后一个元素)A移至堆顶节点，通过不断的向上(向下)调整A的位置完成堆顶节点的删除。

4 堆的一些相关概念
  4.1 堆也可以叫优先队列(priority queue)，所以堆的操作看上去更像是queue的操作

5 堆得应用
  5.1 求一个长度为N序列中第K大的数：可以通过建立一个大小为K的最小堆，从K+1的位置开始进行与最小堆堆顶进行比较，如果小于堆顶元素，就舍弃；如果大于堆顶元素，就替换堆顶元素并且对最小堆进行维护，最后最小堆堆顶元素就是第K大的数。


 